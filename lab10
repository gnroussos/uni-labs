#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FALSE 0
#define TRUE 1 

// A macro to print debug messages only if debug mode is TRUE
// This macro behaves like a printf() function
// The \ character at end of each line of this macro is necessary
#define debug(...)	   \
  if( debugMode ) {           \
    printf(__VA_ARGS__);           \
  }  

// A macro to convert boolean values to string
#define toString(flag) ((flag) ? "TRUE" : "FALSE")

// Define bool user defined datatype
typedef int bool;

// Initialize debug mode to be false
int debugMode = FALSE;


// A function to print the menu
void printMenu(){
  printf("1. factorial(n)\n");
  printf("2. Fibonacci(n)\n");
  printf("3. isPrime(n)\n");
  printf("4. gcd(m, n)\n");
  printf("5. exponential(m,n)\n");
  printf("\nEnter a number between 1 - 5, or 0 to exit: ");
}

// Function to compute factorial
int factorial(int n) {
  // This variable is used to print indented debug messages
  static int depth = -1;

  debug("%*sCalling factorial( %d )\n", ++depth, "", n);

  if( 0 == n || 1 == n) {
    debug("%*sReturning with value %d\n", depth--, "", 1);
    return 1;
  } else {
    int retVal = n * factorial(n-1);
    debug("%*sReturning with value %d\n", depth--, "", retVal);
    return retVal;
  }
}

// Function to compute fibonacci number
int fibonacci(int n) {
  static int depth = -1;
  debug("%*sCalling fibonacci( %d )\n", ++depth, "", n);

  if( 0 == n || 1 == n) {
    debug("%*sReturning with value %d\n", depth--, "", n);
    return n;
  } else {
    int retVal = fibonacci(n-1) + fibonacci(n-2);
    debug("%*sReturning with value %d\n", depth--, "", retVal);
    return retVal;
  }
}

// Function to check if a factor is in range
bool factorInRange(int m, int n) {
  static int depth = 0;
  debug("%*sCalling factorInRange( %d, %d )\n", ++depth, "", m, n);

  if( m >= n ) {
    debug("%*sReturning with value %s\n", depth--, "", toString(FALSE));
    return FALSE;
  } else if( 0 == n % m ) {
    debug("%*sReturning with value %s\n", depth--, "", toString(TRUE));
    return TRUE;
  } else {
    int retVal = factorInRange(m+1, n);
    debug("%*sReturning with value %s\n", depth--, "", toString(retVal));
    return retVal;
  }
}

// Function to check is a number is prime
bool isPrime(int n) {
  debug("%*sCalling isPrime( %d )\n", 0, "", n);
  bool retVal = (n < 2) ? FALSE : !factorInRange(2, n);
  debug("%*sReturning %s\n", 0, "", toString( retVal ));
  return retVal;
}

// Function to compute GCD of two integers
int gcd(int m, int n) {
  static int depth = -1;
  debug("%*sCalling gcd( %d, %d )\n", ++depth, "", m, n);

  if(m == n) {
    debug("%*sReturning with value %d\n", depth--, "", m);
    return m;
  } else {
    int retVal = (m > n) ? gcd(m-n, n) : gcd(m, n - m);
    debug("%*sReturning with value %d\n", depth--, "", retVal);
    return retVal;
  }
}

// Function to compute m^n
int exponential(int m, int n) {
  static int depth = -1;
  debug("%*sCalling exponential( %d, %d )\n", ++depth, "", m, n);

  if(0 == n) {
    debug("%*sReturning with value %d\n", depth--, "", 1);
    return 1;
  } else if( 1 == n ) {
    debug("%*sReturning with value %d\n", depth--, "", m);
    return m;
  } else if( 0 == n%2 ) {
    int temp = exponential(m, n/2);
    int retVal = temp * temp;
    debug("%*sReturning with value %d\n", depth--, "", retVal);
    return retVal;
  } else {
    int retVal = m * exponential(m, n - 1);
    debug("%*sReturning with value %d\n", depth--, "", retVal);
    return retVal;
  }
}

int main (int argc, char **argv) {
  debugMode = FALSE;

  if( argc > 2 ) {
    printf("Usage: %s [-d]\n", argv[0]);
    exit(0);
  }

  if( argc == 2 && argv[1][0] == '-' && argv[1][1] == 'd' ) {
    debugMode = TRUE;
  }

  bool done = FALSE;
  while( !done ) {
    int f = 0;
    printMenu();
    scanf("%d", &f);

    int val1 = 0;
    int val2 = 0;

    switch(f) {
    case 0:
      done = TRUE;
      break;

    case 1:
      printf("Enter an +ve integer: ");
      scanf("%d", &val1);
      if( val1 < 0 ) {
	printf("Factorial of negative number is undefined\n\n");
      } else {
	printf("\n%d! is %d\n\n", val1, factorial( val1 ) );
      }
      break;

    case 2:
      printf("Enter an +ve integer: ");
      scanf("%d", &val1);
      if( val1 < 0 ) {
	printf("Fibonnaci of negative number is undefined\n\n");
      } else {
	printf("\nfibonacci(%d) is %d\n\n", val1, fibonacci( val1 ) );
      }
      break;

    case 3:
      printf("Enter an +ve integer: ");
      scanf("%d", &val1);
      bool flag = isPrime( val1 );
      char *fmt = flag ? "%d is a prime number\n\n" : "%d is NOT a prime number\n\n";
      printf(fmt, val1);
      break;

    case 4:
      printf("Enter two +ve integers: ");
      scanf("%d %d", &val1, &val2);
      if( val1 < 0 || val2 < 0 ) {
	printf("GCD is not defined for negative numbers\n\n");
      } else {
	printf("The GCD of %d and %d is %d\n\n", val1, val2, gcd(val1, val2));
      }
      break;

    case 5:
      printf("Enter two integers: ");
      scanf("%d %d", &val1, &val2);
      if( val2 < 0 ) {
	printf("Exponent cannot be a negative number\n\n");
      } else {
	printf("%d^%d is %d\n\n", val1, val2, exponential(val1, val2));
      }
      break;

    default:
      printf("Invalid selection! Please chose again!\n");
      break;
    }
  }

  return 0;
}

