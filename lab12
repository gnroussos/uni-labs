#include <stdlib.h>
#include <stdio.h>
#include <conio.h>

#define TRUE 1
#define FALSE 0

typedef struct linknode 
{
	int data;
	struct linknode *left;
	struct linknode *right;
} tree_node; 

tree_node *root;

int isEmpty() 
{ 
	return root == NULL; 
}
	
void insert(int d)
{
    tree_node *t;

	t = (tree_node *) malloc(sizeof(tree_node));
    tree_node* parent;
    
	t->data = d;
    t->left = NULL;
    t->right = NULL;
    parent = NULL;
    
    // is this a new tree?
    if(isEmpty())
		root = t;
    else
    {
        //Note: ALL insertions are as leaf nodes
        tree_node *curr;
        curr = root;
        // Find the Node's parent
        while(curr)
        {
            parent = curr;
            if(t->data > curr->data) 
				curr = curr->right;
            else 
				curr = curr->left;
        }
        if(t->data < parent->data)
           parent->left = t;
        else
           parent->right = t;
    }
}

void remove(int d)
{
    int found = FALSE;
    
	if(isEmpty())
    {
        printf("Tree is empty!\n");
        return;
    }
    
    tree_node *curr;
    tree_node *parent;
    
	curr = root;
    
    while(curr != NULL)
    {
         if(curr->data == d)
         {
            found = TRUE;
            break;
         }
         else
         {
             parent = curr;
             if(d>curr->data) 
				 curr = curr->right;
             else 
				 curr = curr->left;
         }
    }
    
	if(!found)
	{
        printf("Data not found!\n");
        return;
    }

    // 1. We're removing a leaf node
    // 2. We're removing a node with a single child
    // 3. we're removing a node with 2 children

    // Node with single child
    if((curr->left == NULL && curr->right != NULL) || (curr->left != NULL && curr->right == NULL))
    {
       if(curr->left == NULL && curr->right != NULL)
       {
           if(parent->left == curr)
           {
             parent->left = curr->right;
             free(curr);
           }
           else
           {
             parent->right = curr->right;
             delete curr;
           }
       }
		else // left child present, no right child
       {
          if(parent->left == curr)
           {
             parent->left = curr->left;
             free(curr);
           }
           else
           {
             parent->right = curr->left;
             free(curr);
           }
       }
     return;
    }

	if(curr->left == NULL && curr->right == NULL)
    {
        if(parent->left == curr) 
			parent->left = NULL;
        else 
			parent->right = NULL;
		 delete curr;
		 return;
    }
//Node with 2 children
// replace node with smallest value in right subtree
    if (curr->left != NULL && curr->right != NULL)
    {
        tree_node *chkr;
        chkr = curr->right;
        if((chkr->left == NULL) && (chkr->right == NULL))
        {
            curr = chkr;
            free(chkr);
            curr->right = NULL;
        }
        else // right child has children
        {
            //if the node's right child has a left child
            // Move all the way down left to locate smallest 
            if((curr->right)->left != NULL)
            {
                tree_node* lcurr;
                tree_node* lcurrp;
                lcurrp = curr->right;
                lcurr = (curr->right)->left;
                while(lcurr->left != NULL)
                {
                   lcurrp = lcurr;
                   lcurr = lcurr->left;
                }
				curr->data = lcurr->data;
                delete lcurr;
                lcurrp->left = NULL;
           }
           else
           {
               tree_node* tmp;
               tmp = curr->right;
               curr->data = tmp->data;
				curr->right = tmp->right;
               free(tmp);
           }

        }
		 return;
    }

}

void inorder(tree_node *p)
{
    if(p != NULL)
    {
        if(p->left) 
			inorder(p->left);
       printf("%d\n",p->data);
        if(p->right) 
			inorder(p->right);
    }
    else 
		return;
}

void print_inorder()
{
  inorder(root);
}

void preorder(tree_node *p)
{
    if(p != NULL)
    {
        printf("%d\n",p->data);
        if(p->left) preorder(p->left);
        if(p->right) preorder(p->right);
    }
    else 
		return;
}

void print_preorder()
{
    preorder(root);
}

void postorder(tree_node *p)
{
    if(p != NULL)
    {
        if(p->left) 
			postorder(p->left);
        if(p->right) 
			postorder(p->right);
        printf("%d\n",p->data);
    }
    else return;
}

void print_postorder()
{
    postorder(root);
}

void destroy_node(tree_node *p)
{
	if (p != NULL)
    {
      destroy_node(p->left);
      destroy_node(p->right);
      free(p);
    }
}

void destroy_tree()
{
	destroy_node(root);
	root = NULL;
}

int main()
{
    root = NULL;

    int ch=0,tmp,tmp1;
    
	while(ch != 'q')
    {
		system("cls");
       printf("a - insert integer\n");
       printf("i - list in-order\n");
       printf("r - list pre-order\n");
       printf("p - list post-order\n");
       printf("e - empty list\n");
       printf("q - quit\n");
       printf("Enter choice: ");
       scanf("%c",&ch);
       
	   switch(ch)
       {
           case 'a': 
					printf("enter integer: \n");
                    scanf("%d",&tmp);
                    insert(tmp);
                    break;
           case 'i': 
                    printf("\nin-order list \n");
					print_inorder();
                    
					printf("\nPress a key\n");
				   _getch();             
				   break;
           case 'r':
                    printf("\npre-order list\n");
                    print_preorder();
					
					printf("\nPress a key\n");
				   _getch();             
                    break;
           case 'p':
                    printf("\npost-order list\n");
                    print_postorder();
					
					printf("\nPress a key\n");
				   _getch();             
                    break;
           case 'e':
					destroy_tree();
					printf("\ntree emptied!!!\nPress a key\n");
				   _getch();             
                    break;    
       }
    }
}
